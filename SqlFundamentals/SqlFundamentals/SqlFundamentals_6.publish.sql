/*
Deployment script for dbo

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "dbo"
:setvar DefaultFilePrefix "dbo"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Table [dbo].[Address]...';


GO
CREATE TABLE [dbo].[Address] (
    [Id]      INT           NOT NULL,
    [Street]  NVARCHAR (50) NOT NULL,
    [City]    NVARCHAR (20) NULL,
    [State]   NVARCHAR (50) NULL,
    [ZipCode] NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Company]...';


GO
CREATE TABLE [dbo].[Company] (
    [Id]        INT           NOT NULL,
    [Name]      NVARCHAR (20) NOT NULL,
    [AddressId] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Employee]...';


GO
CREATE TABLE [dbo].[Employee] (
    [Id]           INT            NOT NULL,
    [AddressId]    INT            NOT NULL,
    [PersonId]     INT            NOT NULL,
    [CompanyName]  NVARCHAR (20)  NOT NULL,
    [Position]     NVARCHAR (30)  NULL,
    [EmployeeName] NVARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Person]...';


GO
CREATE TABLE [dbo].[Person] (
    [Id]        INT           NOT NULL,
    [FirstName] NVARCHAR (50) NOT NULL,
    [LastName]  NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Company]...';


GO
ALTER TABLE [dbo].[Company] WITH NOCHECK
    ADD FOREIGN KEY ([AddressId]) REFERENCES [dbo].[Address] ([Id]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Employee]...';


GO
ALTER TABLE [dbo].[Employee] WITH NOCHECK
    ADD FOREIGN KEY ([AddressId]) REFERENCES [dbo].[Address] ([Id]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Employee]...';


GO
ALTER TABLE [dbo].[Employee] WITH NOCHECK
    ADD FOREIGN KEY ([PersonId]) REFERENCES [dbo].[Person] ([Id]);


GO
PRINT N'Creating Trigger [dbo].[InsertIntoEmployeeTrigger]...';


GO
CREATE TRIGGER [dbo].[InsertIntoEmployeeTrigger]
	ON [dbo].[Employee]
	AFTER INSERT
	AS INSERT INTO [dbo].[Company] (Name, AddressId)
	   VALUES (
		(SELECT CompanyName FROM [dbo].[Employee] WHERE Id=(SELECT Id FROM inserted)),
		(SELECT AddressId FROM [dbo].[Employee] WHERE Id=(SELECT Id FROM inserted)))
GO
PRINT N'Creating View [dbo].[EmployeeInfoView]...';


GO
CREATE VIEW EmployeeInfoView 
AS
SELECT dbo.Employee.Id AS EmployeeId, (CASE WHEN dbo.Employee.EmployeeName IS NULL OR
                  dbo.Employee.EmployeeName = '' THEN CONCAT(dbo.Person.FirstName, CONCAT(' ', dbo.Person.LastName)) ELSE dbo.Employee.EmployeeName END) AS EmployeeFullName, 
                  { fn CONCAT({ fn CONCAT({ fn CONCAT(dbo.Address.ZipCode, '_') }, { fn CONCAT(dbo.Address.State, ',') }) }, { fn CONCAT({ fn CONCAT(dbo.Address.City, '-') }, dbo.Address.Street) }) } AS EmployeeFullAddress, 
                  { fn CONCAT({ fn CONCAT(dbo.Company.Name, '(') }, { fn CONCAT(dbo.Employee.Position, ')') }) } AS EmployeeCompanyInfo
FROM     dbo.Address INNER JOIN
                  dbo.Company ON dbo.Address.Id = dbo.Company.AddressId INNER JOIN
                  dbo.Employee ON dbo.Address.Id = dbo.Employee.AddressId INNER JOIN
                  dbo.Person ON dbo.Employee.PersonId = dbo.Person.Id
GO
PRINT N'Creating Procedure [dbo].[InsertEmployeeInfoSP]...';


GO
CREATE PROCEDURE [dbo].[InsertEmployeeInfoSP]
	@employeeName nvarchar(100) = NULL,
	@firstName nvarchar(50) = NULL,
	@lastName nvarchar(50) = NULL,
	@companyName nvarchar(20),
	@position nvarchar(30) = NULL,
	@street nvarchar(50),
	@city nvarchar(20) = NULL,
	@state nvarchar(50) = NULL,
	@zipCode nvarchar(50) = NULL
AS

-- checking the requirements
IF (@firstName IS NULL OR @firstName='' OR @firstName=' ') AND 
	(@lastName IS NULL OR @lastName='' OR @lastName=' ') AND 
	(@employeeName IS NULL OR @employeeName='' OR @employeeName=' ')
	BEGIN
		RETURN 0
	END

-- inserting into [dbo].[Address]
	INSERT INTO [dbo].[Address] (Street, City, State, ZipCode)
	VALUES (@street, @city, @state, @zipCode);

-- inserting into [dbo].[Person]
IF (@firstName IS NULL OR @firstName='' OR @firstName=' ') AND 
	(@lastName IS NULL OR @lastName='' OR @lastName=' ')
	BEGIN
		INSERT INTO [dbo].[Person] (FirstName, LastName)
		VALUES (@employeeName, @employeeName);
	END

IF (@firstName IS NULL OR @firstName='' OR @firstName=' ') AND 
	(@lastName IS NOT NULL OR @lastName!='' OR @lastName!=' ')
	BEGIN
		INSERT INTO [dbo].[Person] (FirstName, LastName)
		VALUES (@employeeName, @lastName);
	END

IF (@firstName IS NOT NULL OR @firstName!='' OR @firstName!=' ') AND 
	(@lastName IS NULL OR @lastName='' OR @lastName=' ')
	BEGIN
		INSERT INTO [dbo].[Person] (FirstName, LastName)
		VALUES (@firstName, @employeeName);
	END

-- inserting into [dbo].[Company]
	INSERT INTO [dbo].[Company] (Name, AddressId)
	VALUES (@companyName, (SELECT Id FROM [dbo].[Address] WHERE Street=@street));

-- inserting into [dbo].[Company]
	INSERT INTO [dbo].[Employee] (AddressId, PersonId, CompanyName, Position, EmployeeName)
	VALUES (
		(SELECT Id FROM [dbo].[Address] WHERE Street=@street),
		(SELECT Id FROM [dbo].[Person] WHERE FirstName=@firstName AND LastName=@lastName),
		@companyName, @position, @employeeName)
RETURN 0
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Company'), OBJECT_ID(N'dbo.Employee'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
-- insert one record per table
INSERT INTO [dbo].[Person]
VALUES (0, 'Asad', 'Khasanov');

INSERT INTO [dbo].[Address]
VALUES (0, 'A.Yugbakiy', 'Tashkent', 'Uzbekistan', '70707');

INSERT INTO [dbo].[Address]
VALUES (1, 'Aybek 18/1', 'Tashkent', 'Uzbekistan', '90909');

INSERT INTO [dbo].[Employee]
VALUES (0, 0, 0, 'EPAM SYSTEMS', 'Software Engineer', 'Asad Khasanov');

INSERT INTO [dbo].[Company]
VALUES (0, 'EPAM SYSTEMS', 1);
-- insert one record per table

PRINT N'Update complete.';

GO
